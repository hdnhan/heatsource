You chose the file "\\Hdnhan\d\Study\HUST\FEM\heatsource\FreeFem++\2D_Integration.edp"
-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 '\\Hdnhan\d\Study\HUST\FEM\heatsource\FreeFem++'
CMD.EXE was started with the above path as the current directory.
UNC paths are not supported.  Defaulting to Windows directory.
eigenvalue
    1 : load "ff-IpOpt"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\ff-IpOpt = 0)
    2 : load "msh3"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\msh3 = 0)
    3 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    4 :
    5 : real T = 1;
    6 : int nn = 40;
    7 : int Nx = nn, Ny = nn, Nz = nn;
    8 : int[int] labs = [1, 2, 3, 4, 5, 0];
    9 : mesh3 Th = cube(Nx, Ny, Nz, [x, y, T * z], label = labs);
   10 : fespace Vh(Th, P1);
   11 :
   12 :
   13 :
   14 : // ***** DATA ***** //
   15 : Vh ue = exp(z) * sin(pi * x) * sin(pi * y);
   16 : Vh uD = 0;
   17 : Vh u0 = ue(x, y, 0);
   18 :
   19 : Vh fe = sin(pi * x) * (2 * y * ( y < 0.5) + 2 * (1 - y) * (y >= 0.5)) * ((z >= 0.25) * (z <= 0.75));
   20 : Vh q = 2 + x^2 + y^2 + z^2;
   21 : Vh g = (1 + 2 * pi^2) * ue - fe * q;
   22 : real gamma = 1e-5;
   23 :
   24 :
   25 :
   26 : //  Integrate on space
   27 : //   The result is a vector with respect to (t)
   28 : func real[int] IntegralOnSpace(real[int] mat){
   29 :     real[int] res(Nz + 1);
   30 :     Vh temp = 0;
   31 :     for (int i = 0; i <= Nz; i++){
   32 :         for (int j = 0; j <= Ny; j++){
   33 :             for (int k = 0; k <= Nx; k++){
   34 :                 temp[][j * (Nx + 1) + k] = mat[i * (Ny + 1) * (Nx + 1) + j * (Nx + 1) + k];
   35 :             }
   36 :         }
   37 :         res[i] = int2d(Th, 5)(temp);
   38 :     }
   39 :     return res;
   40 : }
   41 :
   42 : real[int] lue(Nz + 1);
   43 :
   44 : // The integration observation
   45 : Vh omg = 1 + x^2 + y^2; // omega
   46 : Vh we = omg * ue;
   47 : lue = IntegralOnSpace(we[]);
   48 :
   49 :
   50 :
   51 : // ***** Functions to modify matrix ***** //
   52 :
   53 : // ** Change the time direction
   54 : func real[int] FlipTimeDirection(real[int] mat){
   55 :     Vh u;
   56 :     for (int i = 0; i <= Nz/2; i++){
   57 :         for (int j = 0; j <= Ny; j++){
   58 :             for (int k = 0; k <= Nx; k++){
   59 :                 u[][i * (Nx + 1) * (Ny + 1) + j * (Nx + 1) + k] = mat[(Nz - i) * (Nx + 1) * (Ny + 1) + j * (Nx + 1) + k];
   60 :                 u[][(Nz - i) * (Nx + 1) * (Ny + 1) + j * (Nx + 1) + k] = mat[i * (Nx + 1) * (Ny + 1) + j * (Nx + 1) + k];
   61 :             }
   62 :         }
   63 :     }
   64 :     return u[];
   65 : }
   66 :
   67 : // To change vec(t) into vec(x, t) depending on the mesh
   68 : func real[int] TimeToQ(real[int] mat){
   69 :     Vh res = 0;
   70 :     for (int i = 0; i <= Nz; i++){
   71 :         for (int j = 0; j <= Ny; j++)
   72 :             for (int k = 0; k <= Nx; k++){
   73 :                 res[][i * (Ny + 1) * (Nx + 1) + j * (Nx + 1) + k] = mat[i];
   74 :             }
   75 :     }
   76 :     return res[];
   77 : }
   78 :
   79 :
   80 : mesh Th1 = square(Nx, Nz);
   81 : fespace Vh1(Th1, P1);
   82 : // Inner product on time domain of vec1(t) and vec2(t)
   83 : func real InnerProductOnTime(real[int] vec1, real[int] vec2){
   84 :     real[int] vec(Nz + 1);
   85 :     for (int i = 0; i <= Nz; i++){
   86 :         vec[i] = vec1[i] * vec2[i];
   87 :     }
   88 :
   89 :     // Take int1d on x = 0 (label = 4);
   90 :     Vh1 res = 0;
   91 :     for (int i = 0; i <= Nz; i++){
   92 :         res[][i * (Nx + 1)] = vec[i];
   93 :     }
   94 :
   95 :     return int1d(Th1, 4)(res);
   96 : }
   97 :
   98 :
   99 :
  100 : // ***** State and Adjoint problems ***** //
  101 :
  102 : // State equation:
  103 : func real[int] StateProblem(real[int] ff){
  104 :     Vh u, v, f; f[] = ff;
  105 :     Vh rsh = f * q + g;
  106 :
  107 :     solve SpaceTime(u, v, solver = sparsesolver) =
  108 :           int3d(Th)(dz(u)  * v + dx(u)  * dx(v) + dy(u)  * dy(v))
  109 :         +  int3d(Th)(dz(u0)  * v + dx(u0)  * dx(v) + dy(u0)  * dy(v))
  110 :         - int3d(Th)(rsh * v)
  111 :         + on(1, 2, 3, 4, u = uD) + on(5, u = 0);
  112 :     u = u + u0;
  113 :     return u[];
  114 : }
  115 :
  116 :
  117 : // Adjoint equation
  118 : func real[int] AdjointProblem(real[int] uu){
  119 :     Vh p, v, u; u[] = uu;
  120 :     Vh wh = omg * u;
  121 :     real[int] del = IntegralOnSpace(wh[]) - lue;
  122 :     Vh delta; delta[] = TimeToQ(del);
  123 :     Vh rhs = omg * delta;
  124 :     rhs[] = FlipTimeDirection(rhs[]);
  125 :
  126 :     solve SpaceTime(p, v, solver = sparsesolver) =
  127 :           int3d(Th)(dz(p) * v + dx(p) * dx(v) + dy(p) * dy(v))
  128 :         - int3d(Th)(rhs * v)
  129 :         + on(1, 2, 3, 4, 5, p = 0);
  130 :
  131 :     return FlipTimeDirection(p[]);
  132 : }
  133 :
  134 :
  135 :
  136 : // Tikhonov functional
  137 : func real J(real[int] ff) {
  138 :     Vh f; f[] = ff;
  139 :     Vh u; u[] = StateProblem(ff);
  140 :     Vh wh = omg * u;
  141 :     real[int] del = IntegralOnSpace(wh[]) - lue;
  142 :     return 0.5 * InnerProductOnTime(del, del) + 0.5 * gamma * int3d(Th)(f^2);
  143 : }
  144 :
  145 :
  146 : // Gradient of Tikhonov funtional
  147 : func real[int] GradJ(real[int] ff) {
  148 :     Vh p; p[] = AdjointProblem(StateProblem(ff));
  149 :     Vh qp = p * q;
  150 :     real[int] res = qp[] + gamma * ff;
  151 :     return res;
  152 : }
  153 :
  154 :
  155 :
  156 : Vh fh = fe;
  157 : IPOPT(J, GradJ, fh[], tol = 0.5e-3);
  158 : savesol("2D_Integration_fh.sol", Th, fh);
  159 :
  160 : cout << "J: " << J(fh[]) << endl;
  161 : Vh delta = fh - fe;
  162 :
  163 : cout << "fe min and max: " << fe[].min << ", " << fe[].max << endl;
  164 : cout << "fh min and max: " << fh[].min << ", " << fh[].max << endl;
  165 : cout << "(fh-fe) min and max: " << delta[].min << ", " << delta[].max << endl;
  166 : cout << "erorr L2: " << sqrt(int3d(Th)(delta * delta)) << endl; sizestack + 1024 =11128  ( 10104 )
 
  Enter: BuildCube: 6
    kind = 6 n tet Cube = 6 / n slip 6 70
  Cube  nv=68921 nt=384000 nbe=19200
  Out:  BuildCube
  -- FESpace: Nb of Nodes 68921 Nb of DoF 68921
  -- Square mesh : nb vertices  =1681 ,  nb triangles = 3200 ,  nb boundary edges 160
 
IPOPT Note : No hessian given ==> LBFGS hessian approximation enabled
 
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************
 
This is Ipopt version 3.12.4, running with linear solver mumps.
NOTE: Other linear solvers might be more efficient (see Ipopt documentation).
 
Number of nonzeros in equality constraint Jacobian...:        0
Number of nonzeros in inequality constraint Jacobian.:        0
Number of nonzeros in Lagrangian Hessian.............:        0
 
  -- Solve :
          min -7.72028e-036  max 1.70953
  -- Solve :
          min -0.000244639  max 1.60691e-038
Total number of variables............................:    68921
                     variables with only lower bounds:        0
                variables with lower and upper bounds:        0
                     variables with only upper bounds:        0
Total number of equality constraints.................:        0
Total number of inequality constraints...............:        0
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:        0
        inequality constraints with only upper bounds:        0
 
  -- Solve :
          min -7.72028e-036  max 1.70953
  -- Solve :
          min -0.000244639  max 1.60691e-038
  -- Solve :
          min -7.72028e-036  max 1.70953
iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0 1.7913226e-006 0.00e+000 8.29e-004   0.0 0.00e+000    -  0.00e+000 0.00e+000   0
  -- Solve :
          min -7.72334e-036  max 1.70961
  -- Solve :
          min -7.72334e-036  max 1.70961
  -- Solve :
          min -0.000234035  max 1.52773e-038
   1 1.6971757e-006 0.00e+000 7.93e-004 -11.0 8.29e-004    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -7.82862e-036  max 1.71135
  -- Solve :
          min -7.82862e-036  max 1.71135
  -- Solve :
          min -2.38949e-005  max 1.91958e-005
   2 5.4088744e-007 0.00e+000 8.83e-005 -11.0 1.93e-002    -  1.00e+000 1.00e+000f  1
 
Number of Iterations....: 2
 
                                   (scaled)                 (unscaled)
Objective...............:  5.4088743837627315e-007   5.4088743837627315e-007
Dual infeasibility......:  8.8309214737353656e-005   8.8309214737353656e-005
Constraint violation....:  0.0000000000000000e+000   0.0000000000000000e+000
Complementarity.........:  0.0000000000000000e+000   0.0000000000000000e+000
Overall NLP error.......:  8.8309214737353656e-005   8.8309214737353656e-005
 
 
Number of objective function evaluations             = 3
Number of objective gradient evaluations             = 3
Number of equality constraint evaluations            = 0
Number of inequality constraint evaluations          = 0
Number of equality constraint Jacobian evaluations   = 0
Number of inequality constraint Jacobian evaluations = 0
Number of Lagrangian Hessian evaluations             = 0
Total CPU secs in IPOPT (w/o function evaluations)   =     34.160
Total CPU secs in NLP function evaluations           =    112.402
 
EXIT: Optimal Solution Found.
 
 
*** Ipopt succeeded
  -- Solve :
          min -7.82862e-036  max 1.71135
J: 5.40887e-007
fe min and max: 0, 1
fh min and max: -1.3929e-036, 1.01592
(fh-fe) min and max: -6.24358e-020, 0.0200733
erorr L2: 0.00794075
times: compile 0.208s, execution 161.358s,  mpirank:0
 ######## We forget of deleting   544 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3873,  size :424272 mpirank: 0
Ok: Normal End
 try getConsole \\Hdnhan\d\Study\HUST\FEM\heatsource\FreeFem++\2D_Integration.edp
