You chose the file "\\Hdnhan\d\Study\HUST\FEM\heatsource\FreeFem++\2D_Integration.edp"
-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "ff-IpOpt"'\\Hdnhan\d\Study\HUST\FEM\heatsource\FreeFem++'
CMD.EXE was started with the above path as the current directory.
UNC paths are not supported.  Defaulting to Windows directory.
(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\ff-IpOpt = 0)
    2 : load "msh3"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\msh3 = 0)
    3 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    4 :
    5 : real T = 1;
    6 : int nn = 20;
    7 : int Nx = nn, Ny = nn, Nz = nn;
    8 : int[int] labs = [1, 2, 3, 4, 5, 0];
    9 : mesh3 Th = cube(Nx, Ny, Nz, [x, y, T * z], label = labs);
   10 : fespace Vh(Th, P1);
   11 :
   12 :
   13 :
   14 : // ***** DATA ***** //
   15 : Vh ue = exp(z) * sin(pi * x) * sin(pi * y);
   16 : Vh uD = 0;
   17 : Vh u0 = ue(x, y, 0);
   18 :
   19 : Vh fe = sin(pi * x) * sin(pi * y) * sin(pi * z);
   20 : Vh q = 2 + x^2 + y^2 + z^2;
   21 : Vh g = (1 + 2 * pi^2) * ue - fe * q;
   22 : real gamma = 1e-5;
   23 :
   24 :
   25 :
   26 : //  Integrate on space
   27 : //   The result is a vector with respect to (t)
   28 : func real[int] IntegralOnSpace(real[int] mat){
   29 :     real[int] res(Nz + 1);
   30 :     Vh temp = 0;
   31 :     for (int i = 0; i <= Nz; i++){
   32 :         for (int j = 0; j <= Ny; j++){
   33 :             for (int k = 0; k <= Nx; k++){
   34 :                 temp[][j * (Nx + 1) + k] = mat[i * (Ny + 1) * (Nx + 1) + j * (Nx + 1) + k];
   35 :             }
   36 :         }
   37 :         res[i] = int2d(Th, 5)(temp);
   38 :     }
   39 :     return res;
   40 : }
   41 :
   42 : // The integration observation
   43 : Vh omg = 1 + x^2 + y^2 + z^2; // omega
   44 : Vh we = omg * ue;
   45 : real[int] lue = IntegralOnSpace(we[]);
   46 :
   47 :
   48 :
   49 : // ***** Functions to modify matrix ***** //
   50 :
   51 : // ** Change the time direction
   52 : func real[int] FlipTimeDirection(real[int] mat){
   53 :     Vh u;
   54 :     for (int i = 0; i <= Nz/2; i++){
   55 :         for (int j = 0; j <= Ny; j++){
   56 :             for (int k = 0; k <= Nx; k++){
   57 :                 u[][i * (Nx + 1) * (Ny + 1) + j * (Ny + 1) + k] = mat[(Nz - i) * (Nx + 1) * (Ny + 1) + j * (Ny + 1) + k];
   58 :                 u[][(Nz - i) * (Nx + 1) * (Ny + 1) + j * (Ny + 1) + k] = mat[i * (Nx + 1) * (Ny + 1) + j * (Ny + 1) + k];
   59 :             }
   60 :         }
   61 :     }
   62 :     return u[];
   63 : }
   64 :
   65 : // To change vec(t) into vec(x, t) depending on the mesh
   66 : func real[int] TimeToQ(real[int] mat){
   67 :     Vh res = 0;
   68 :     for (int i = 0; i <= Nz; i++){
   69 :         for (int j = 0; j <= Ny; j++)
   70 :             for (int k = 0; k <= Nx; k++){
   71 :                 res[][i * (Ny + 1) * (Nx + 1) + j * (Nx + 1) + k] = mat[i];
   72 :             }
   73 :     }
   74 :     return res[];
   75 : }
   76 :
   77 : // Inner product on time domain of vec1(t) and vec2(t)
   78 : func real InnerProductOnTime(real[int] vec1, real[int] vec2){
   79 :     mesh Th1 = square(Nx, Nz);
   80 :     real[int] vec(Nz + 1);
   81 :     for (int i = 0; i <= Nz; i++){
   82 :         vec[i] = vec1[i] * vec2[i];
   83 :     }
   84 :
   85 :     // Take int1d on x = 0 (label = 4);
   86 :     Vh res = 0;
   87 :     for (int i = 0; i <= Nz; i++){
   88 :         res[][i * (Nx + 1)] = vec[i];
   89 :     }
   90 :
   91 :     return int1d(Th1, 4)(res);
   92 : }
   93 :
   94 :
   95 :
   96 : // ***** State and Adjoint problems ***** //
   97 :
   98 : // State equation:
   99 : func real[int] StateProblem(real[int] ff){
  100 :     Vh u, v, f; f[] = ff;
  101 :     Vh rsh = f * q + g;
  102 :
  103 :     solve SpaceTime(u, v, solver = sparsesolver) =
  104 :           int3d(Th)(dz(u)  * v + dx(u)  * dx(v) + dy(u)  * dy(v))
  105 :         - int3d(Th)(rsh * v)
  106 :         + on(1, 2, 3, 4, u = uD) + on(5, u = u0);
  107 :
  108 :     return u[];
  109 : }
  110 :
  111 :
  112 : // Adjoint equation
  113 : func real[int] AdjointProblem(real[int] uu){
  114 :     Vh p, v, u; u[] = uu;
  115 :     Vh wh = omg * u;
  116 :     real[int] del = IntegralOnSpace(wh[]) - lue;
  117 :     Vh delta; delta[] = TimeToQ(del);
  118 :     Vh rhs = omg * delta;
  119 :     rhs[] = FlipTimeDirection(rhs[]);
  120 :
  121 :     solve SpaceTime(p, v, solver = sparsesolver) =
  122 :           int3d(Th)(dz(p) * v + dx(p) * dx(v) + dy(p) * dy(v))
  123 :         - int3d(Th)(rhs * v)
  124 :         + on(1, 2, 3, 4, 5, p = 0);
  125 :
  126 :     return FlipTimeDirection(p[]);
  127 : }
  128 :
  129 :
  130 :
  131 : // Tikhonov functional
  132 : func real J(real[int] ff) {
  133 :     Vh f; f[] = ff;
  134 :     Vh u; u[] = StateProblem(ff);
  135 :     Vh wh = omg * u;
  136 :     real[int] del = IntegralOnSpace(wh[]) - lue;
  137 :     return 0.5 * InnerProductOnTime(del, del) + 0.5 * gamma * int3d(Th)(f^2);
  138 : }
  139 :
  140 :
  141 : // Gradient of Tikhonov funtional
  142 : func real[int] GradJ(real[int] ff) {
  143 :     Vh p; p[] = AdjointProblem(StateProblem(ff));
  144 :     Vh qp = p * q;
  145 :     real[int] res = qp[] + gamma * ff;
  146 :     return res;
  147 : }
  148 :
  149 :
  150 :
  151 : Vh fh = 0;
  152 : IPOPT(J, GradJ, fh[], tol = 1e-4);
  153 :
  154 : cout << "J: " << J(fh[]) << endl;
  155 : Vh delta = fh - fe;
  156 :
  157 : cout << "fe min and max: " << fe[].min << ", " << fe[].max << endl;
  158 : cout << "fh min and max: " << fh[].min << ", " << fh[].max << endl;
  159 : cout << "(fh-fe) min and max: " << delta[].min << ", " << delta[].max << endl;
  160 : cout << "erorr L2: " << sqrt(int3d(Th)(delta * delta)) << endl; sizestack + 1024 =10272  ( 9248 )
 
  Enter: BuildCube: 6
    kind = 6 n tet Cube = 6 / n slip 6 70
  Cube  nv=9261 nt=48000 nbe=4800
  Out:  BuildCube
  -- FESpace: Nb of Nodes 9261 Nb of DoF 9261
 
IPOPT Note : No hessian given ==> LBFGS hessian approximation enabled
 
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************
 
This is Ipopt version 3.12.4, running with linear solver mumps.
NOTE: Other linear solvers might be more efficient (see Ipopt documentation).
 
Number of nonzeros in equality constraint Jacobian...:        0
Number of nonzeros in inequality constraint Jacobian.:        0
Number of nonzeros in Lagrangian Hessian.............:        0
 
  -- Solve :
          min -1.17919e-036  max 2.65694
  -- Solve :
          min -0.0181885  max 7.22277e-036
Total number of variables............................:     9261
                     variables with only lower bounds:        0
                variables with lower and upper bounds:        0
                     variables with only upper bounds:        0
Total number of equality constraints.................:        0
Total number of inequality constraints...............:        0
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:        0
        inequality constraints with only upper bounds:        0
 
  -- Solve :
          min -1.17919e-036  max 2.65694
  -- Solve :
          min -0.0181885  max 7.22277e-036
  -- Solve :
          min -1.17919e-036  max 2.65694
  -- Square mesh : nb vertices  =441 ,  nb triangles = 800 ,  nb boundary edges 80
iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0 3.8383172e-003 0.00e+000 5.66e-002   0.0 0.00e+000    -  0.00e+000 0.00e+000   0
  -- Solve :
          min -1.15932e-036  max 2.66069
  -- Square mesh : nb vertices  =441 ,  nb triangles = 800 ,  nb boundary edges 80
  -- Solve :
          min -1.15932e-036  max 2.66069
  -- Solve :
          min -0.0169656  max 6.48362e-036
   1 3.3851361e-003 0.00e+000 5.25e-002 -11.0 5.66e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -9.88097e-037  max 2.69171
  -- Square mesh : nb vertices  =441 ,  nb triangles = 800 ,  nb boundary edges 80
  -- Solve :
          min -9.88097e-037  max 2.69171
  -- Solve :
          min -0.00160234  max 0.0011366
   2 3.8375006e-005 0.00e+000 4.41e-003 -11.0 8.82e-001    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -9.82793e-037  max 2.69365
  -- Square mesh : nb vertices  =441 ,  nb triangles = 800 ,  nb boundary edges 80
  -- Solve :
          min -9.82793e-037  max 2.69365
  -- Solve :
          min -0.000587526  max 0.000365077
   3 1.1052400e-005 0.00e+000 1.60e-003 -11.0 8.64e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -9.83965e-037  max 2.69333
  -- Square mesh : nb vertices  =441 ,  nb triangles = 800 ,  nb boundary edges 80
  -- Solve :
          min -9.83965e-037  max 2.69333
  -- Solve :
          min -4.24238e-005  max 3.60122e-005
   4 7.4942194e-006 0.00e+000 1.10e-004 -11.0 5.04e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -9.84003e-037  max 2.69347
  -- Square mesh : nb vertices  =441 ,  nb triangles = 800 ,  nb boundary edges 80
  -- Solve :
          min -9.84003e-037  max 2.69347
  -- Solve :
          min -1.63956e-005  max 2.50317e-005
   5 7.4314507e-006 0.00e+000 7.12e-005 -11.0 3.58e-003    -  1.00e+000 1.00e+000f  1
 
Number of Iterations....: 5
 
                                   (scaled)                 (unscaled)
Objective...............:  7.4314506631549827e-006   7.4314506631549827e-006
Dual infeasibility......:  7.1206028638562464e-005   7.1206028638562464e-005
Constraint violation....:  0.0000000000000000e+000   0.0000000000000000e+000
Complementarity.........:  0.0000000000000000e+000   0.0000000000000000e+000
Overall NLP error.......:  7.1206028638562464e-005   7.1206028638562464e-005
 
 
Number of objective function evaluations             = 6
Number of objective gradient evaluations             = 6
Number of equality constraint evaluations            = 0
Number of inequality constraint evaluations          = 0
Number of equality constraint Jacobian evaluations   = 0
Number of inequality constraint Jacobian evaluations = 0
Number of Lagrangian Hessian evaluations             = 0
Total CPU secs in IPOPT (w/o function evaluations)   =      1.403
Total CPU secs in NLP function evaluations           =     10.614
 
EXIT: Optimal Solution Found.
 
 
*** Ipopt succeeded
  -- Solve :
          min -9.84003e-037  max 2.69347
  -- Square mesh : nb vertices  =441 ,  nb triangles = 800 ,  nb boundary edges 80
J: 7.43145e-006
fe min and max: 0, 1
fh min and max: -2.46728e-034, 0.931075
(fh-fe) min and max: -0.184063, 0.294335
erorr L2: 0.0826107
times: compile 0.21s, execution 12.862s,  mpirank:0
 ######## We forget of deleting   909 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3818,  size :421488 mpirank: 0
Ok: Normal End
 try getConsole \\Hdnhan\d\Study\HUST\FEM\heatsource\FreeFem++\2D_Integration.edp
