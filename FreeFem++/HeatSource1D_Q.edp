load "ff-IpOpt"
load "medit"

real T = 1;
int nn = 20;
int Nx = nn, Ny = nn; 
int[int] labs = [1, 2, 0, 4];
mesh Th = square(Nx, Ny, [x, T * y], label = labs);
fespace Vh(Th, P1);


Vh ue = exp(y) * sin(pi * x);
Vh duex = exp(y) * cos(pi * x) * pi;
Vh uN = (x == 1) * duex - (x == 0) * duex;
Vh u0 = ue(x, 0);

//Vh fe = x * (1-x) * y * (1-y);
Vh fe = 1 * sin(pi * x) * sin(pi * y);
//Vh fe = (x * (x <= 0.5) + (1 - x) * (x > 0.5)) * y * (1-y); 

Vh q = 2 + x^2 + y^2;
Vh g = (1 + pi^2) * ue(x, y) - fe(x, y) * q(x,y);
real gamma = 1e-6;


func real[int] flip(real[int] uu){
    Vh u;
    for (int i = 0; i <= Ny/2; i++){
        for (int j = 0; j <= Nx; j++){
            u[][i * (Nx + 1) + j] = uu[(Ny - i) * (Nx + 1) + j];
            u[][(Ny - i) * (Nx + 1) + j] = uu[i * (Nx + 1) + j];
        }
    }
    return u[];
}


// State equation:
func real[int] StateProblem(real[int] ff){
    Vh u, v, f; f[] = ff;
    Vh rsh = f * q + g;

    solve SpaceTime(u, v, solver = sparsesolver) = 
          int2d(Th)(dy(u)  * v + dx(u)  * dx(v)) 
        + int2d(Th)(dy(u0) * v + dx(u0) * dx(v))
        - int1d(Th, 2, 4) (uN * v)
        - int2d(Th)(rsh * v) 
        + on(1, u = 0);

    u = u + u0;
    return u[];
}




// Adjoint equation
func real[int] AdjointProblem(real[int] uu){
    Vh p, v, u; u[] = uu;
    Vh temp = u - ue; 
    Vh rsh; rsh[] =  flip(temp[]);

    solve SpaceTime(p, v, solver = sparsesolver) =
          int2d(Th)(dy(p) * v + dx(p) * dx(v))
        - int2d(Th)(rsh * v)
        + on(1, p = 0);

    return flip(p[]);
}

// Tikhonov functional
func real J(real[int] ff) {
    Vh f; f[] = ff;
    Vh u; u[] = StateProblem(ff); 
    return 0.5 * int2d(Th)((u - ue)^2) + 0.5 * gamma * int2d(Th)(f^2);
}


// Gradient of Tikhonov funtional
func real[int] GradJ(real[int] ff) {
    Vh f; f[] = ff;
    real[int] uu = StateProblem(ff);
    Vh p; p[] = AdjointProblem(uu);
    Vh res = p * q + gamma * f;
    return res[];
}



Vh fh = 0;
IPOPT(J, GradJ, fh[], tol = 1e-4);
//NLCG(GradJ, fh[], nbiter = 1000, eps = -1e-6);
//LinearCG(GradJ, f[], eps = 1e-6);

cout << "J: " << J(fh[]) << endl; 


//savemesh(Th, "IP1.mesh");
//savesol("IP1.sol", Th, f);
//savemesh(Th, "IPe.mesh");
//savesol("IPe.sol", Th, fe);

Vh delta = fh - fe;

cout << "kq: " << fe[].min << ", " << fe[].max << endl;
cout << "kq: " << fh[].min << ", " << fh[].max << endl;
cout << "delta: " << delta[].min << ", " << delta[].max << endl;
cout << "ss: " << sqrt(int2d(Th)(delta^2)) << endl;
