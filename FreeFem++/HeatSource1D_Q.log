-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "ff-IpOpt"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\ff-IpOpt = 0)
    2 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    3 :
    4 : real T = 1;
    5 : int nn = 20;
    6 : int Nx = nn, Ny = nn;
    7 : int[int] labs = [1, 2, 0, 4];
    8 : mesh Th = square(Nx, Ny, [x, T * y], label = labs);
    9 : fespace Vh(Th, P1);
   10 :
   11 :
   12 : Vh ue = exp(y) * sin(pi * x);
   13 : Vh duex = exp(y) * cos(pi * x) * pi;
   14 : Vh uN = (x == 1) * duex - (x == 0) * duex;
   15 : Vh u0 = ue(x, 0);
   16 :
   17 : //Vh fe = x * (1-x) * y * (1-y);
   18 : Vh fe = 1 * sin(pi * x) * sin(pi * y);
   19 : //Vh fe = (x * (x <= 0.5) + (1 - x) * (x > 0.5)) * y * (1-y);
   20 :
   21 : Vh q = 2 + x^2 + y^2;
   22 : Vh g = (1 + pi^2) * ue(x, y) - fe(x, y) * q(x,y);
   23 : real gamma = 1e-6;
   24 :
   25 :
   26 : func real[int] flip(real[int] uu){
   27 :     Vh u;
   28 :     for (int i = 0; i <= Ny/2; i++){
   29 :         for (int j = 0; j <= Nx; j++){
   30 :             u[][i * (Nx + 1) + j] = uu[(Ny - i) * (Nx + 1) + j];
   31 :             u[][(Ny - i) * (Nx + 1) + j] = uu[i * (Nx + 1) + j];
   32 :         }
   33 :     }
   34 :     return u[];
   35 : }
   36 :
   37 :
   38 : // State equation:
   39 : func real[int] StateProblem(real[int] ff){
   40 :     Vh u, v, f; f[] = ff;
   41 :     Vh rsh = f * q + g;
   42 :
   43 :     solve SpaceTime(u, v, solver = sparsesolver) =
   44 :           int2d(Th)(dy(u)  * v + dx(u)  * dx(v))
   45 :         + int2d(Th)(dy(u0) * v + dx(u0) * dx(v))
   46 :         - int1d(Th, 2, 4) (uN * v)
   47 :         - int2d(Th)(rsh * v)
   48 :         + on(1, u = 0);
   49 :
   50 :     u = u + u0;
   51 :     return u[];
   52 : }
   53 :
   54 :
   55 :
   56 :
   57 : // Adjoint equation
   58 : func real[int] AdjointProblem(real[int] uu){
   59 :     Vh p, v, u; u[] = uu;
   60 :     Vh temp = u - ue;
   61 :     Vh rsh; rsh[] =  flip(temp[]);
   62 :
   63 :     solve SpaceTime(p, v, solver = sparsesolver) =
   64 :           int2d(Th)(dy(p) * v + dx(p) * dx(v))
   65 :         - int2d(Th)(rsh * v)
   66 :         + on(1, p = 0);
   67 :
   68 :     return flip(p[]);
   69 : }
   70 :
   71 : // Tikhonov functional
   72 : func real J(real[int] ff) {
   73 :     Vh f; f[] = ff;
   74 :     Vh u; u[] = StateProblem(ff);
   75 :     return 0.5 * int2d(Th)((u - ue)^2) + 0.5 * gamma * int2d(Th)(f^2);
   76 : }
   77 :
   78 :
   79 : // Gradient of Tikhonov funtional
   80 : func real[int] GradJ(real[int] ff) {
   81 :     Vh f; f[] = ff;
   82 :     real[int] uu = StateProblem(ff);
   83 :     Vh p; p[] = AdjointProblem(uu);
   84 :     Vh res = p * q + gamma * f;
   85 :     return res[];
   86 : }
   87 :
   88 :
   89 :
   90 : Vh fh = 0;
   91 : IPOPT(J, GradJ, fh[], tol = 1e-4);
   92 : //NLCG(GradJ, fh[], nbiter = 1000, eps = -1e-6);
   93 : //LinearCG(GradJ, f[], eps = 1e-6);
   94 :
   95 : cout << "J: " << J(fh[]) << endl;
   96 :
   97 :
   98 : //savemesh(Th, "IP1.mesh");
   99 : //savesol("IP1.sol", Th, f);
  100 : //savemesh(Th, "IPe.mesh");
  101 : //savesol("IPe.sol", Th, fe);
  102 :
  103 : Vh delta = fh - fe;
  104 :
  105 : cout << "kq: " << fe[].min << ", " << fe[].max << endl;
  106 : cout << "kq: " << fh[].min << ", " << fh[].max << endl;
  107 : cout << "delta: " << delta[].min << ", " << delta[].max << endl;
  108 : cout << "ss: " << sqrt(int2d(Th)(delta^2)) << endl;
  109 :  sizestack + 1024 =9056  ( 8032 )
 
  -- Square mesh : nb vertices  =441 ,  nb triangles = 800 ,  nb boundary edges 80
 
IPOPT Note : No hessian given ==> LBFGS hessian approximation enabled
 
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************
 
This is Ipopt version 3.12.4, running with linear solver mumps.
NOTE: Other linear solvers might be more efficient (see Ipopt documentation).
 
Number of nonzeros in equality constraint Jacobian...:        0
Number of nonzeros in inequality constraint Jacobian.:        0
Number of nonzeros in Lagrangian Hessian.............:        0
 
  -- Solve :
          min -1.08089  max 0.633249
  -- Solve :
          min -0.518469  max 1.38969e-033
Total number of variables............................:      441
                     variables with only lower bounds:        0
                variables with lower and upper bounds:        0
                     variables with only upper bounds:        0
Total number of equality constraints.................:        0
Total number of inequality constraints...............:        0
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:        0
        inequality constraints with only upper bounds:        0
 
  -- Solve :
          min -1.08089  max 0.633249
  -- Solve :
          min -0.518469  max 1.38969e-033
  -- Solve :
          min -1.08089  max 0.633249
iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0 2.0413819e-001 0.00e+000 1.56e+000   0.0 0.00e+000    -  0.00e+000 0.00e+000   0
  -- Solve :
          min -5.01845e-033  max 3.05365
  -- Solve :
          min -5.01845e-033  max 3.05365
  -- Solve :
          min -5.01845e-033  max 3.05365
  -- Solve :
          min -5.01845e-033  max 3.05365
  -- Solve :
          min -5.01845e-033  max 3.05365
  -- Solve :
          min -2.84803e-033  max 1.84345
  -- Solve :
          min -2.84803e-033  max 1.84345
  -- Solve :
          min -1.7553e-034  max 0.183268
   1 1.8200678e-002 0.00e+000 5.50e-001 -11.0 1.56e+000    -  1.00e+000 5.00e-001f  2
  -- Solve :
          min -0.0891565  max 1.61166
  -- Solve :
          min -0.0891565  max 1.61166
  -- Solve :
          min -0.0222665  max 0.0350187
   2 3.7644497e-003 0.00e+000 1.05e-001 -11.0 2.04e-001    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -0.0807377  max 1.61945
  -- Solve :
          min -0.0807377  max 1.61945
  -- Solve :
          min -0.0218276  max 0.0261799
   3 2.8954427e-003 0.00e+000 7.85e-002 -11.0 4.94e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -0.00531241  max 1.71736
  -- Solve :
          min -0.00531241  max 1.71736
  -- Solve :
          min -0.002706  max 0.00676951
   4 2.7589412e-004 0.00e+000 2.03e-002 -11.0 2.81e-001    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -1.48378e-033  max 1.71519
  -- Solve :
          min -1.48378e-033  max 1.71519
  -- Solve :
          min -0.00252435  max 0.00319821
   5 1.7753298e-004 0.00e+000 1.12e-002 -11.0 6.50e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -0.000588816  max 1.70912
  -- Solve :
          min -0.000588816  max 1.70912
  -- Solve :
          min -1.79076e-035  max 0.0031204
   6 1.0100190e-004 0.00e+000 9.99e-003 -11.0 8.77e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -0.0101007  max 1.70183
  -- Solve :
          min -0.0101007  max 1.70183
  -- Solve :
          min -0.00510954  max 2.81055e-035
   7 8.7870610e-005 0.00e+000 1.53e-002 -11.0 1.12e-001    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -1.36956e-033  max 1.71403
  -- Solve :
          min -1.36956e-033  max 1.71403
  -- Solve :
          min -4.1789e-035  max 0.00429119
   8 7.6735038e-005 0.00e+000 1.18e-002 -11.0 2.79e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -1.32351e-033  max 1.71062
  -- Solve :
          min -1.32351e-033  max 1.71062
  -- Solve :
          min -4.90434e-005  max 0.00228095
   9 6.7541270e-005 0.00e+000 5.36e-003 -11.0 2.19e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -0.00444258  max 1.70933
  -- Solve :
          min -0.00444258  max 1.70933
  -- Solve :
          min -0.0014666  max 0.00123918
iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
  10 5.8203604e-005 0.00e+000 4.09e-003 -11.0 6.56e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -0.0464436  max 1.67406
  -- Solve :
          min -0.0464436  max 1.67406
  -- Solve :
          min -0.0464436  max 1.67406
  -- Solve :
          min -0.0464436  max 1.67406
  -- Solve :
          min -0.0464436  max 1.67406
  -- Solve :
          min -0.0198366  max 1.6917
  -- Solve :
          min -0.00785848  max 1.70051
  -- Solve :
          min -0.00785848  max 1.70051
  -- Solve :
          min -0.00167783  max 0.00153534
  11 4.6928905e-005 0.00e+000 4.61e-003 -11.0 4.04e-001    -  1.00e+000 2.50e-001f  3
  -- Solve :
          min -0.00564165  max 1.72951
  -- Solve :
          min -0.00564165  max 1.72951
  -- Solve :
          min -0.00564165  max 1.72951
  -- Solve :
          min -0.00564165  max 1.72951
  -- Solve :
          min -0.00564165  max 1.72951
  -- Solve :
          min -0.000483205  max 1.71501
  -- Solve :
          min -0.000483205  max 1.71501
  -- Solve :
          min -7.49342e-035  max 0.00462075
  12 3.5365728e-005 0.00e+000 1.56e-002 -11.0 1.54e-001    -  1.00e+000 5.00e-001f  2
  -- Solve :
          min -0.0756554  max 1.81616
  -- Solve :
          min -0.0756554  max 1.81616
  -- Solve :
          min -0.0756554  max 1.81616
  -- Solve :
          min -0.0756554  max 1.81616
  -- Solve :
          min -0.0756554  max 1.81616
  -- Solve :
          min -0.03222  max 1.76558
  -- Solve :
          min -0.0134899  max 1.7403
  -- Solve :
          min -0.00698654  max 1.72765
  -- Solve :
          min -0.00373487  max 1.72133
  -- Solve :
          min -0.00210904  max 1.71817
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -8.3706e-035  max 0.00527774
  13 3.5213569e-005 0.00e+000 1.74e-002 -11.0 1.04e+000    -  1.00e+000 1.56e-002f  7
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0335771  max 1.76591
  -- Solve :
          min -0.0139297  max 1.74125
  -- Solve :
          min -0.00761291  max 1.72892
  -- Solve :
          min -0.00445452  max 1.72276
  -- Solve :
          min -0.00287532  max 1.71967
  -- Solve :
          min -0.00208572  max 1.71813
  -- Solve :
          min -0.00169092  max 1.71736
  -- Solve :
          min -0.00149352  max 1.71698
  -- Solve :
          min -0.00139482  max 1.71678
  -- Solve :
          min -0.00134547  max 1.71669
  -- Solve :
          min -0.0013208  max 1.71664
  -- Solve :
          min -0.00130846  max 1.71661
  -- Solve :
          min -0.00130229  max 1.7166
  -- Solve :
          min -0.00129921  max 1.7166
  -- Solve :
          min -0.00129766  max 1.71659
  -- Solve :
          min -0.00129689  max 1.71659
  -- Solve :
          min -0.00129651  max 1.71659
  -- Solve :
          min -0.00129631  max 1.71659
  -- Solve :
          min -0.00129622  max 1.71659
  -- Solve :
          min -0.00129617  max 1.71659
  -- Solve :
          min -0.00129615  max 1.71659
  -- Solve :
          min -0.00129613  max 1.71659
  -- Solve :
          min -0.00129613  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -8.3706e-035  max 0.00527774
  14 3.5213569e-005 0.00e+000 1.74e-002 -11.0 1.01e+000    -  1.00e+000 8.88e-016f 51
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0770122  max 1.81523
  -- Solve :
          min -0.0335771  max 1.76591
  -- Solve :
          min -0.0139297  max 1.74125
  -- Solve :
          min -0.00761291  max 1.72892
  -- Solve :
          min -0.00445452  max 1.72276
  -- Solve :
          min -0.00287532  max 1.71967
  -- Solve :
          min -0.00208572  max 1.71813
  -- Solve :
          min -0.00169092  max 1.71736
  -- Solve :
          min -0.00149352  max 1.71698
  -- Solve :
          min -0.00139482  max 1.71678
  -- Solve :
          min -0.00134547  max 1.71669
  -- Solve :
          min -0.0013208  max 1.71664
  -- Solve :
          min -0.00130846  max 1.71661
  -- Solve :
          min -0.00130229  max 1.7166
  -- Solve :
          min -0.00129921  max 1.7166
  -- Solve :
          min -0.00129766  max 1.71659
  -- Solve :
          min -0.00129689  max 1.71659
  -- Solve :
          min -0.00129651  max 1.71659
  -- Solve :
          min -0.00129631  max 1.71659
  -- Solve :
          min -0.00129622  max 1.71659
  -- Solve :
          min -0.00129617  max 1.71659
  -- Solve :
          min -0.00129615  max 1.71659
  -- Solve :
          min -0.00129613  max 1.71659
  -- Solve :
          min -0.00129613  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
  -- Solve :
          min -0.00129612  max 1.71659
 try getConsole D:\Study\HUST\FEM\heatsource\FreeFem++\HeatSource1D_Q.edp
