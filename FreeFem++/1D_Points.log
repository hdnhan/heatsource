-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "ff-IpOpt"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\ff-IpOpt = 0)
    2 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    3 :
    4 : real T = 1;
    5 : int nn = 50;
    6 : int Nx = nn, Ny = nn;
    7 : int[int] labs = [1, 2, 0, 4];
    8 : mesh Th = square(Nx, Ny, [x, T * y], label = labs);
    9 : fespace Vh(Th, P1);
   10 :
   11 :
   12 : // ***** DATA ***** //
   13 : Vh ue = exp(y) * sin(pi * x);
   14 : Vh uD = 0;
   15 : Vh u0 = ue(x, 0);
   16 :
   17 : Vh fe = sin(pi * x) * sin(pi * y);
   18 :
   19 : Vh q = 2 + x^2 + y^2;
   20 : Vh g = (1 + pi^2) * ue - fe * q;
   21 : real gamma = 1e-5;
   22 :
   23 :
   24 :
   25 : // ** Integrate on space
   26 : //   The result is a vector with respect to (t)
   27 : func real[int] IntegralOnSpace(real[int] mat){
   28 :     real[int] res(Ny + 1);
   29 :     Vh temp = 0;
   30 :     for (int i = 0; i <= Ny; i++){
   31 :         for (int j = 0; j <= Nx; j++){
   32 :             temp[][j] = mat[i * (Nx + 1) + j];
   33 :         }
   34 :         res[i] = int1d(Th, 1)(temp);
   35 :     }
   36 :     return res;
   37 : }
   38 :
   39 : // The integration observation
   40 : real x0 = 0.5; // point
   41 : Vh omg = Nx / (2 * (cosh(Nx * (x - x0)))^2);
   42 : real[int] lue(Ny + 1);
   43 :
   44 : // either
   45 : Vh we = omg * ue;
   46 : lue = IntegralOnSpace(we[]);
   47 :
   48 : // or
   49 : //for (int i = 0; i <= Ny; i++){
   50 : //    lue[i] = ue(x0, 1.0 * i / Ny);
   51 : //}
   52 :
   53 :
   54 : // ***** Functions to modify matrix ***** //
   55 :
   56 : // ** Change the time direction
   57 : func real[int] FlipTimeDirection(real[int] mat){
   58 :     Vh res;
   59 :     for (int i = 0; i <= Ny/2; i++){
   60 :         for (int j = 0; j <= Nx; j++){
   61 :             res[][i * (Nx + 1) + j] = mat[(Ny - i) * (Nx + 1) + j];
   62 :             res[][(Ny - i) * (Nx + 1) + j] = mat[i * (Nx + 1) + j];
   63 :         }
   64 :     }
   65 :     return res[];
   66 : }
   67 :
   68 : // ** To change vec(t) into vec(x, t) depending on the mesh
   69 : func real[int] TimeToQ(real[int] mat){
   70 :     Vh res = 0;
   71 :     for (int i = 0; i <= Ny; i++){
   72 :         for (int j = 0; j <= Nx; j++)
   73 :         res[][i * (Nx + 1) + j] = mat[i];
   74 :     }
   75 :     return res[];
   76 : }
   77 :
   78 : // ** Inner product on time domain of vec1(t) and vec2(t)
   79 : func real InnerProductOnTime(real[int] vec1, real[int] vec2){
   80 :     real[int] vec(Ny + 1);
   81 :     for (int i = 0; i <= Ny; i++){
   82 :         vec[i] = vec1[i] * vec2[i];
   83 :     }
   84 :
   85 :     // Take int1d on x = 0 (label = 4);
   86 :     Vh res = 0;
   87 :     for (int i = 0; i <= Ny; i++){
   88 :         res[][i * (Nx + 1)] = vec[i];
   89 :     }
   90 :
   91 :     return int1d(Th, 4)(res);
   92 : }
   93 :
   94 :
   95 :
   96 : // ***** State and Adjoint problems ***** //
   97 :
   98 : // * State problem
   99 : func real[int] StateProblem(real[int] ff){
  100 :     Vh u, v, f; f[] = ff;
  101 :     Vh rsh = q * f + g;
  102 :
  103 :     solve SpaceTime(u, v, solver = sparsesolver) =
  104 :           int2d(Th)(dy(u)  * v + dx(u)  * dx(v))
  105 :         //+ int2d(Th)(dy(u0) * v + dx(u0) * dx(v))
  106 :         - int2d(Th)(rsh * v)
  107 :         + on(2, 4, u = uD) + on(1, u = u0);
  108 :
  109 :     //u = u + u0;
  110 :     return u[];
  111 : }
  112 :
  113 :
  114 : // * Adjoint problem
  115 : func real[int] AdjointProblem(real[int] uu){
  116 :     Vh p, v, u; u[] = uu;
  117 :     Vh wh = omg * u;
  118 :     real[int] del = IntegralOnSpace(wh[]) - lue;
  119 :     Vh delta; delta[] = TimeToQ(del);
  120 :     Vh rhs = omg * delta;
  121 :     rhs[] = FlipTimeDirection(rhs[]);
  122 :
  123 :     solve SpaceTime(p, v, solver = sparsesolver) =
  124 :           int2d(Th)(dy(p) * v + dx(p) * dx(v))
  125 :         - int2d(Th)(rhs * v)
  126 :         + on(1, 2, 4, p = 0);
  127 :     return FlipTimeDirection(p[]);
  128 : }
  129 :
  130 :
  131 : // Tikhonov functional
  132 : func real J(real[int] ff) {
  133 :     Vh f; f[] = ff;
  134 :     Vh u; u[] = StateProblem(ff);
  135 :     Vh wh = omg * u;
  136 :     real[int] del = IntegralOnSpace(wh[]) - lue;
  137 :     return 0.5 * InnerProductOnTime(del, del) + 0.5 * gamma * int2d(Th)(f^2);
  138 : }
  139 :
  140 :
  141 : // Gradient of Tikhonov funtional
  142 : func real[int] GradJ(real[int] ff) {
  143 :     Vh p; p[] = AdjointProblem(StateProblem(ff));
  144 :     Vh qp = p * q;
  145 :     real[int] res = qp[] + gamma * ff;
  146 :     return res;
  147 : }
  148 :
  149 :
  150 :
  151 : Vh fh = 0;
  152 : IPOPT(J, GradJ, fh[], tol = 1e-5);
  153 :
  154 : cout << "J: " << J(fh[]) << endl;
  155 : Vh delta = fh - fe;
  156 :
  157 : cout << "fe min and max: " << fe[].min << ", " << fe[].max << endl;
  158 : cout << "fh min and max: " << fh[].min << ", " << fh[].max << endl;
  159 : cout << "(fh-fe) min and max: " << delta[].min << ", " << delta[].max << endl;
  160 : cout << "erorr L2: " << sqrt(int2d(Th)(delta * delta)) << endl;
  161 : plot(fe, dim = 3, wait = 1);
  162 : plot(fh, dim = 3, wait = 1);
  163 : plot(fe, fh, dim = 3, wait = 1); sizestack + 1024 =8976  ( 7952 )
 
  -- Square mesh : nb vertices  =2601 ,  nb triangles = 5000 ,  nb boundary edges 200
 
IPOPT Note : No hessian given ==> LBFGS hessian approximation enabled
 
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************
 
This is Ipopt version 3.12.4, running with linear solver mumps.
NOTE: Other linear solvers might be more efficient (see Ipopt documentation).
 
Number of nonzeros in equality constraint Jacobian...:        0
Number of nonzeros in inequality constraint Jacobian.:        0
Number of nonzeros in Lagrangian Hessian.............:        0
 
  -- Solve :
          min 3.13913e-032  max 2.6289
  -- Solve :
          min -0.0572982  max 6.6109e-035
Total number of variables............................:     2601
                     variables with only lower bounds:        0
                variables with lower and upper bounds:        0
                     variables with only upper bounds:        0
Total number of equality constraints.................:        0
Total number of inequality constraints...............:        0
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:        0
        inequality constraints with only upper bounds:        0
 
  -- Solve :
          min 3.13913e-032  max 2.6289
  -- Solve :
          min -0.0572982  max 6.6109e-035
  -- Solve :
          min 3.13913e-032  max 2.6289
iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0 1.5524611e-002 0.00e+000 1.48e-001   0.0 0.00e+000    -  0.00e+000 0.00e+000   0
  -- Solve :
          min 3.13912e-032  max 2.64277
  -- Solve :
          min 3.13912e-032  max 2.64277
  -- Solve :
          min -0.0501059  max 5.54544e-035
   1 1.1813704e-002 0.00e+000 1.29e-001 -11.0 1.48e-001    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13903e-032  max 2.71901
  -- Solve :
          min 3.13903e-032  max 2.71901
  -- Solve :
          min -0.00137731  max 0.00103583
   2 1.1716252e-005 0.00e+000 3.23e-003 -11.0 1.02e+000    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13904e-032  max 2.71599
  -- Solve :
          min 3.13904e-032  max 2.71599
  -- Solve :
          min -0.000431707  max 0.000867221
   3 3.4351303e-006 0.00e+000 1.95e-003 -11.0 2.76e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13906e-032  max 2.71531
  -- Solve :
          min 3.13906e-032  max 2.71531
  -- Solve :
          min -8.4148e-005  max 0.000490946
   4 1.7982378e-006 0.00e+000 1.11e-003 -11.0 2.89e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13907e-032  max 2.71538
  -- Solve :
          min 3.13907e-032  max 2.71538
  -- Solve :
          min -8.70244e-005  max 0.000187044
   5 1.4035206e-006 0.00e+000 4.22e-004 -11.0 2.65e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13908e-032  max 2.71523
  -- Solve :
          min 3.13908e-032  max 2.71523
  -- Solve :
          min -4.29623e-005  max 7.29816e-005
   6 1.3175395e-006 0.00e+000 1.65e-004 -11.0 1.84e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13908e-032  max 2.71546
  -- Solve :
          min 3.13908e-032  max 2.71546
  -- Solve :
          min -5.41643e-005  max 4.30801e-005
   7 1.2974258e-006 0.00e+000 1.35e-004 -11.0 1.50e-002    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13908e-032  max 2.71516
  -- Solve :
          min 3.13908e-032  max 2.71516
  -- Solve :
          min -1.83915e-005  max 1.8104e-005
   8 1.2914898e-006 0.00e+000 5.61e-005 -11.0 4.15e-003    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13908e-032  max 2.71523
  -- Solve :
          min 3.13908e-032  max 2.71523
  -- Solve :
          min -1.11755e-005  max 1.18194e-005
   9 1.2880118e-006 0.00e+000 2.95e-005 -11.0 1.07e-003    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13908e-032  max 2.71528
  -- Solve :
          min 3.13908e-032  max 2.71528
  -- Solve :
          min -5.95243e-006  max 1.01817e-005
iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
  10 1.2862445e-006 0.00e+000 2.33e-005 -11.0 1.88e-003    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13909e-032  max 2.71511
  -- Solve :
          min 3.13909e-032  max 2.71511
  -- Solve :
          min 3.13909e-032  max 2.71511
  -- Solve :
          min 3.13909e-032  max 2.71511
  -- Solve :
          min 3.13909e-032  max 2.71511
  -- Solve :
          min 3.13909e-032  max 2.71519
  -- Solve :
          min 3.13909e-032  max 2.71523
  -- Solve :
          min 3.13908e-032  max 2.71525
  -- Solve :
          min 3.13908e-032  max 2.71526
  -- Solve :
          min 3.13908e-032  max 2.71526
  -- Solve :
          min -6.83044e-006  max 8.13288e-006
  11 1.2862107e-006 0.00e+000 1.86e-005 -11.0 8.70e-003    -  1.00e+000 6.25e-002f  5
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71524
  -- Solve :
          min 3.13908e-032  max 2.71525
  -- Solve :
          min 3.13908e-032  max 2.71525
  -- Solve :
          min -6.72298e-006  max 5.39526e-006
  12 1.2861449e-006 0.00e+000 1.35e-005 -11.0 3.94e-003    -  1.00e+000 2.50e-001f  3
  -- Solve :
          min 3.13909e-032  max 2.71529
  -- Solve :
          min 3.13909e-032  max 2.71529
  -- Solve :
          min 3.13909e-032  max 2.71529
  -- Solve :
          min 3.13909e-032  max 2.71529
  -- Solve :
          min 3.13909e-032  max 2.71529
  -- Solve :
          min 3.13909e-032  max 2.71527
  -- Solve :
          min 3.13909e-032  max 2.71527
  -- Solve :
          min -1.60939e-005  max 7.90786e-006
  13 1.2861027e-006 0.00e+000 3.01e-005 -11.0 8.82e-003    -  1.00e+000 5.00e-001f  2
  -- Solve :
          min 3.13909e-032  max 2.71523
  -- Solve :
          min 3.13909e-032  max 2.71523
  -- Solve :
          min -7.05927e-006  max 1.30566e-006
  14 1.2860724e-006 0.00e+000 1.12e-005 -11.0 1.17e-003    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71522
  -- Solve :
          min 3.13909e-032  max 2.71523
  -- Solve :
          min 3.13909e-032  max 2.71523
  -- Solve :
          min -5.10656e-006  max 1.19584e-006
  15 1.2860608e-006 0.00e+000 8.65e-006 -11.0 3.49e-004    -  1.00e+000 5.00e-001f  2
 
Number of Iterations....: 15
 
                                   (scaled)                 (unscaled)
Objective...............:  1.2860607600270871e-006   1.2860607600270871e-006
Dual infeasibility......:  8.6548391124348863e-006   8.6548391124348863e-006
Constraint violation....:  0.0000000000000000e+000   0.0000000000000000e+000
Complementarity.........:  0.0000000000000000e+000   0.0000000000000000e+000
Overall NLP error.......:  8.6548391124348863e-006   8.6548391124348863e-006
 
 
Number of objective function evaluations             = 40
Number of objective gradient evaluations             = 16
Number of equality constraint evaluations            = 0
Number of inequality constraint evaluations          = 0
Number of equality constraint Jacobian evaluations   = 0
Number of inequality constraint Jacobian evaluations = 0
Number of Lagrangian Hessian evaluations             = 0
Total CPU secs in IPOPT (w/o function evaluations)   =      1.071
Total CPU secs in NLP function evaluations           =      6.297
 
EXIT: Optimal Solution Found.
 
 
*** Ipopt succeeded
  -- Solve :
          min 3.13909e-032  max 2.71523
J: 1.28606e-006
fe min and max: 0, 1
fh min and max: -0.00390961, 1.17619
(fh-fe) min and max: -0.156193, 0.185656
erorr L2: 0.0653926
times: compile 0.45s, execution 15.704s,  mpirank:0
 ######## We forget of deleting   2993 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3646,  size :413872 mpirank: 0
Ok: Normal End
 try getConsole D:\Study\HUST\FEM\heatsource\FreeFem++\1D_Points.edp
