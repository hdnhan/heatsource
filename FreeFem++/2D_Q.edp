load "ff-IpOpt"
load "msh3"
load "medit"

real T = 1;
int nn = 40;
int Nx = nn, Ny = nn, Nz = nn; 
int[int] labs = [1, 2, 3, 4, 5, 0];
mesh3 Th = cube(Nx, Ny, Nz, [x, y, T * z], label = labs);
fespace Vh(Th, P1);



// ***** DATA ***** //
Vh ue = exp(z) * x*(1-x) * sin(pi * y);
Vh uD = 0;
Vh u0 = ue(x, y, 0);

Vh fe = sin(pi * x)*sin(pi * y)*sin(pi * z);
Vh q = 2 + z^2;
Vh g = (1 + pi^2) * ue + 2 * exp(z)* sin(pi * y) - fe * q;
real gamma = 1e-5;

// The overdetermination
real[int] w((Nx + 1) * (Ny + 1) * (Nz + 1) + 1);
for (int i = 0; i <= Nz; i++){
    for (int j = 0; j <= Ny; j++){
        for(int k = 0; k <= Nx; k++){
            w[i * (Nx + 1) * (Ny + 1) + j * (Nx + 1) + k] = ue(k * 1.0 / Nx, j * 1.0 / Ny, i * 1.0 / Nz);
        }
    }
}



// ***** Functions to modify matrix ***** //

// ** Change the time direction
func real[int] FlipTimeDirection(real[int] mat){
    Vh u;
    for (int i = 0; i <= Nz/2; i++){
        for (int j = 0; j <= Ny; j++){
            for (int k = 0; k <= Nx; k++){
                u[][i * (Nx + 1) * (Ny + 1) + j * (Ny + 1) + k] = mat[(Nz - i) * (Nx + 1) * (Ny + 1) + j * (Ny + 1) + k];
                u[][(Nz - i) * (Nx + 1) * (Ny + 1) + j * (Ny + 1) + k] = mat[i * (Nx + 1) * (Ny + 1) + j * (Ny + 1) + k];
            }
        }
    }
    return u[];
}



// State equation:
func real[int] StateProblem(real[int] ff){
    Vh u, v, f; f[] = ff;
    Vh rsh = f * q + g;

    solve SpaceTime(u, v, solver = sparsesolver) = 
          int3d(Th)(dz(u)  * v + dx(u)  * dx(v) + dy(u)  * dy(v))
        +  int3d(Th)(dz(u0)  * v + dx(u0)  * dx(v) + dy(u0)  * dy(v)) 
        - int3d(Th)(rsh * v) 
        + on(1, 2, 3, 4, u = uD) + on(5, u = 0);
    u = u + u0;
    return u[];
}


// Adjoint equation
func real[int] AdjointProblem(real[int] uu){
    Vh p, v;
    Vh temp; temp[] = uu - w; 
    Vh rsh; rsh[] =  FlipTimeDirection(temp[]);

    solve SpaceTime(p, v, solver = sparsesolver) =
          int3d(Th)(dz(p) * v + dx(p) * dx(v) + dy(p) * dy(v))
        - int3d(Th)(rsh * v)
        + on(1, 2, 3, 4, 5, p = 0);

    return FlipTimeDirection(p[]);
}


// Tikhonov functional
func real J(real[int] ff) {
    Vh f; f[] = ff;
    Vh u; u[] = StateProblem(ff); 
    Vh del; del[] = u[] - w;
    return 0.5 * int3d(Th)(del^2) + 0.5 * gamma * int3d(Th)(f^2);
}


// Gradient of Tikhonov funtional
func real[int] GradJ(real[int] ff) {
    Vh p; p[] = AdjointProblem(StateProblem(ff));
    Vh pq = p * q;
    real[int] res = pq[] + gamma * ff;
    return res;
}



Vh fh = 0;
IPOPT(J, GradJ, fh[], tol = 1e-3);
savesol("2D_Q_fh.sol", Th, fh);

cout << "J: " << J(fh[]) << endl; 
Vh del = fh - fe;

cout << "fe min and max: " << fe[].min << ", " << fe[].max << endl;
cout << "fh min and max: " << fh[].min << ", " << fh[].max << endl;
cout << "(fh-fe) min and max: " << del[].min << ", " << del[].max << endl;
cout << "erorr L2: " << sqrt(int3d(Th)(del * del)) << endl;
