load "medit"

real T = 1;
int nn = 100;
int Nx = nn, Ny = nn; 
int[int] labs = [1, 2, 0, 4];
mesh Th = square(Nx, Ny, [x, T * y], label = labs);
fespace Vh(Th, P1);

Vh ue = exp(y) * sin(pi * x);
Vh duex = exp(y) * cos(pi * x) * pi;
Vh uN = (x == 1) * duex - (x == 0) * duex;
Vh u0 = ue(x, 0);
Vh F = (1 + pi^2) * ue;
Vh u, v;

solve SpaceTime(u, v, solver = GMRES) = 
          int2d(Th)(dy(u) * v + dx(u) * dx(v))
        + int2d(Th)(dy(u0) * v + dx(u0) * dx(v))
        - int1d(Th, 2, 4)(uN * v)
        - int2d(Th)(F * v) + on(1, u = 0);
u = u + u0;


plot(ue, wait = 1, dim=3d);
plot(u, ue, wait = 1, dim=3d);
plot(u, ue, wait = 1, dim=3d);

Vh uu = u;
Vh delta = uu - ue;

cout << "kq: " << ue[].min << ", " << ue[].max << endl;
cout << "kq: " << uu[].min << ", " << uu[].max << endl;
cout << "kq: " << delta[].min << ", " << delta[].max << endl;
cout << "ss: " << sqrt(int2d(Th)(delta^2)) << endl;