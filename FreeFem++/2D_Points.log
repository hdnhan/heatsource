You chose the file "\\Hdnhan\d\Study\HUST\FEM\heatsource\FreeFem++\2D_Points.edp"
-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "ff-IpOpt"'\\Hdnhan\d\Study\HUST\FEM\heatsource\FreeFem++'
CMD.EXE was started with the above path as the current directory.
UNC paths are not supported.  Defaulting to Windows directory.
(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\ff-IpOpt = 0)
    2 : load "msh3"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\msh3 = 0)
    3 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    4 :
    5 : real T = 1;
    6 : int nn = 40;
    7 : int Nx = nn, Ny = nn, Nz = nn;
    8 : int[int] labs = [1, 2, 3, 4, 5, 0];
    9 : mesh3 Th = cube(Nx, Ny, Nz, [x, y, T * z], label = labs);
   10 : fespace Vh(Th, P1);
   11 :
   12 :
   13 :
   14 : // ***** DATA ***** //
   15 : Vh ue = exp(z) * sin(pi * x) * sin(pi * y);
   16 : Vh uD = 0;
   17 : Vh u0 = ue(x, y, 0);
   18 :
   19 : Vh fe = sin(pi * x) * sin(pi * y) * sin(pi * z);
   20 : Vh q = 2 + x^2 + y^2 + z^2;
   21 : Vh g = (1 + 2 * pi^2) * ue - fe * q;
   22 : real gamma = 1e-5;
   23 :
   24 :
   25 :
   26 : //  Integrate on space
   27 : //   The result is a vector with respect to (t)
   28 : func real[int] IntegralOnSpace(real[int] mat){
   29 :     real[int] res(Nz + 1);
   30 :     Vh temp = 0;
   31 :     for (int i = 0; i <= Nz; i++){
   32 :         for (int j = 0; j <= Ny; j++){
   33 :             for (int k = 0; k <= Nx; k++){
   34 :                 temp[][j * (Nx + 1) + k] = mat[i * (Ny + 1) * (Nx + 1) + j * (Nx + 1) + k];
   35 :             }
   36 :         }
   37 :         res[i] = int2d(Th, 5)(temp);
   38 :     }
   39 :     return res;
   40 : }
   41 :
   42 : // The integration observation
   43 : real xx0 = 0.5; // point
   44 : real yy0 = 0.5; // point
   45 : Vh omg = Nx / (2 * (cosh(Nx * (x - xx0)))^2) * Ny / (2 * (cosh(Ny * (y - yy0)))^2);
   46 : real[int] lue(Nz + 1);
   47 :
   48 : // either
   49 : Vh we = omg * ue;
   50 : lue = IntegralOnSpace(we[]);
   51 :
   52 : // or
   53 : //for (int i = 0; i <= Nz; i++){
   54 : //    lue[i] = ue(xx0, yy0, 1.0 * i / Ny);
   55 : //}
   56 :
   57 :
   58 :
   59 : // ***** Functions to modify matrix ***** //
   60 :
   61 : // ** Change the time direction
   62 : func real[int] FlipTimeDirection(real[int] mat){
   63 :     Vh u;
   64 :     for (int i = 0; i <= Nz/2; i++){
   65 :         for (int j = 0; j <= Ny; j++){
   66 :             for (int k = 0; k <= Nx; k++){
   67 :                 u[][i * (Nx + 1) * (Ny + 1) + j * (Nx + 1) + k] = mat[(Nz - i) * (Nx + 1) * (Ny + 1) + j * (Nx + 1) + k];
   68 :                 u[][(Nz - i) * (Nx + 1) * (Ny + 1) + j * (Nx + 1) + k] = mat[i * (Nx + 1) * (Ny + 1) + j * (Nx + 1) + k];
   69 :             }
   70 :         }
   71 :     }
   72 :     return u[];
   73 : }
   74 :
   75 : // To change vec(t) into vec(x, t) depending on the mesh
   76 : func real[int] TimeToQ(real[int] mat){
   77 :     Vh res = 0;
   78 :     for (int i = 0; i <= Nz; i++){
   79 :         for (int j = 0; j <= Ny; j++)
   80 :             for (int k = 0; k <= Nx; k++){
   81 :                 res[][i * (Ny + 1) * (Nx + 1) + j * (Nx + 1) + k] = mat[i];
   82 :             }
   83 :     }
   84 :     return res[];
   85 : }
   86 :
   87 :
   88 : mesh Th1 = square(Nx, Nz);
   89 : fespace Vh1(Th1, P1);
   90 : // Inner product on time domain of vec1(t) and vec2(t)
   91 : func real InnerProductOnTime(real[int] vec1, real[int] vec2){
   92 :     real[int] vec(Nz + 1);
   93 :     for (int i = 0; i <= Nz; i++){
   94 :         vec[i] = vec1[i] * vec2[i];
   95 :     }
   96 :
   97 :     // Take int1d on x = 0 (label = 4);
   98 :     Vh1 res = 0;
   99 :     for (int i = 0; i <= Nz; i++){
  100 :         res[][i * (Nx + 1)] = vec[i];
  101 :     }
  102 :
  103 :     return int1d(Th1, 4)(res);
  104 : }
  105 :
  106 :
  107 :
  108 : // ***** State and Adjoint problems ***** //
  109 :
  110 : // State equation:
  111 : func real[int] StateProblem(real[int] ff){
  112 :     Vh u, v, f; f[] = ff;
  113 :     Vh rsh = f * q + g;
  114 :
  115 :     solve SpaceTime(u, v, solver = sparsesolver) =
  116 :           int3d(Th)(dz(u)  * v + dx(u)  * dx(v) + dy(u)  * dy(v))
  117 :         - int3d(Th)(rsh * v)
  118 :         + on(1, 2, 3, 4, u = uD) + on(5, u = u0);
  119 :
  120 :     return u[];
  121 : }
  122 :
  123 :
  124 : // Adjoint equation
  125 : func real[int] AdjointProblem(real[int] uu){
  126 :     Vh p, v, u; u[] = uu;
  127 :     Vh wh = omg * u;
  128 :     real[int] del = IntegralOnSpace(wh[]) - lue;
  129 :     Vh delta; delta[] = TimeToQ(del);
  130 :     Vh rhs = omg * delta;
  131 :     rhs[] = FlipTimeDirection(rhs[]);
  132 :
  133 :     solve SpaceTime(p, v, solver = sparsesolver) =
  134 :           int3d(Th)(dz(p) * v + dx(p) * dx(v) + dy(p) * dy(v))
  135 :         - int3d(Th)(rhs * v)
  136 :         + on(1, 2, 3, 4, 5, p = 0);
  137 :
  138 :     return FlipTimeDirection(p[]);
  139 : }
  140 :
  141 :
  142 :
  143 : // Tikhonov functional
  144 : func real J(real[int] ff) {
  145 :     Vh f; f[] = ff;
  146 :     Vh u; u[] = StateProblem(ff);
  147 :     Vh wh = omg * u;
  148 :     real[int] del = IntegralOnSpace(wh[]) - lue;
  149 :     return 0.5 * InnerProductOnTime(del, del) + 0.5 * gamma * int3d(Th)(f^2);
  150 : }
  151 :
  152 :
  153 : // Gradient of Tikhonov funtional
  154 : func real[int] GradJ(real[int] ff) {
  155 :     Vh p; p[] = AdjointProblem(StateProblem(ff));
  156 :     Vh qp = p * q;
  157 :     real[int] res = qp[] + gamma * ff;
  158 :     return res;
  159 : }
  160 :
  161 :
  162 :
  163 : Vh fh = fe;
  164 : IPOPT(J, GradJ, fh[], tol = 1e-3);
  165 :
  166 : cout << "J: " << J(fh[]) << endl;
  167 : Vh delta = fh - fe;
  168 :
  169 : cout << "fe min and max: " << fe[].min << ", " << fe[].max << endl;
  170 : cout << "fh min and max: " << fh[].min << ", " << fh[].max << endl;
  171 : cout << "(fh-fe) min and max: " << delta[].min << ", " << delta[].max << endl;
  172 : cout << "erorr L2: " << sqrt(int3d(Th)(delta * delta)) << endl; sizestack + 1024 =11064  ( 10040 )
 
  Enter: BuildCube: 6
    kind = 6 n tet Cube = 6 / n slip 6 70
  Cube  nv=68921 nt=384000 nbe=19200
  Out:  BuildCube
  -- FESpace: Nb of Nodes 68921 Nb of DoF 68921
  -- Square mesh : nb vertices  =1681 ,  nb triangles = 3200 ,  nb boundary edges 160
 
IPOPT Note : No hessian given ==> LBFGS hessian approximation enabled
 
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************
 
This is Ipopt version 3.12.4, running with linear solver mumps.
NOTE: Other linear solvers might be more efficient (see Ipopt documentation).
 
Number of nonzeros in equality constraint Jacobian...:        0
Number of nonzeros in inequality constraint Jacobian.:        0
Number of nonzeros in Lagrangian Hessian.............:        0
 
  -- Solve :
          min -3.43544e-038  max 2.70953
  -- Solve :
          min -0.00162062  max 8.98118e-006
Total number of variables............................:    68921
                     variables with only lower bounds:        0
                variables with lower and upper bounds:        0
                     variables with only upper bounds:        0
Total number of equality constraints.................:        0
Total number of inequality constraints...............:        0
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:        0
        inequality constraints with only upper bounds:        0
 
  -- Solve :
          min -3.43544e-038  max 2.70953
  -- Solve :
          min -0.00162062  max 8.98118e-006
  -- Solve :
          min -3.43544e-038  max 2.70953
iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0 3.9078367e-006 0.00e+000 5.42e-003   0.0 0.00e+000    -  0.00e+000 0.00e+000   0
  -- Solve :
          min -3.43365e-038  max 2.70972
  -- Solve :
          min -3.43365e-038  max 2.70972
  -- Solve :
          min -0.00145853  max 1.02421e-005
   1 3.3928355e-006 0.00e+000 4.96e-003 -11.0 5.42e-003    -  1.00e+000 1.00e+000f  1
  -- Solve :
          min -3.41668e-038  max 2.71137
  -- Solve :
          min -3.41668e-038  max 2.71137
  -- Solve :
          min -0.00022003  max 0.00010285
   2 1.0369324e-006 0.00e+000 7.46e-004 -11.0 5.88e-002    -  1.00e+000 1.00e+000f  1
 
Number of Iterations....: 2
 
                                   (scaled)                 (unscaled)
Objective...............:  1.0369323902031907e-006   1.0369323902031907e-006
Dual infeasibility......:  7.4644652949083172e-004   7.4644652949083172e-004
Constraint violation....:  0.0000000000000000e+000   0.0000000000000000e+000
Complementarity.........:  0.0000000000000000e+000   0.0000000000000000e+000
Overall NLP error.......:  7.4644652949083172e-004   7.4644652949083172e-004
 
 
Number of objective function evaluations             = 3
Number of objective gradient evaluations             = 3
Number of equality constraint evaluations            = 0
Number of inequality constraint evaluations          = 0
Number of equality constraint Jacobian evaluations   = 0
Number of inequality constraint Jacobian evaluations = 0
Number of Lagrangian Hessian evaluations             = 0
Total CPU secs in IPOPT (w/o function evaluations)   =     40.814
Total CPU secs in NLP function evaluations           =    100.767
 
EXIT: Optimal Solution Found.
 
 
*** Ipopt succeeded
  -- Solve :
          min -3.41668e-038  max 2.71137
J: 1.03693e-006
fe min and max: 0, 1
fh min and max: -5.28936e-036, 1.03539
(fh-fe) min and max: -0.0011958, 0.0641749
erorr L2: 0.00764042
times: compile 0.247s, execution 153.962s,  mpirank:0
 ######## We forget of deleting   535 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3850,  size :422408 mpirank: 0
Ok: Normal End
 try getConsole \\Hdnhan\d\Study\HUST\FEM\heatsource\FreeFem++\2D_Points.edp
