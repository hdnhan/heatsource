-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "ff-IpOpt"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\ff-IpOpt = 0)
    2 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    3 :
    4 : real T = 1;
    5 : int nn = 100;
    6 : int Nx = nn, Ny = nn;
    7 : int[int] labs = [1, 2, 0, 4];
    8 : mesh Th = square(Nx, Ny, [x, T * y], label = labs);
    9 : fespace Vh(Th, P1);
   10 :
   11 :
   12 : Vh ue = exp(y) * sin(pi * x);
   13 : Vh duex = exp(y) * cos(pi * x) * pi;
   14 : Vh uN = (x == 1) * duex - (x == 0) * duex;
   15 : Vh u0 = ue(x, 0);
   16 :
   17 : //Vh fe = x * (1-x) * y * (1-y);
   18 : Vh fe = 1 * sin(pi * x) * sin(pi * y);
   19 : //Vh fe = (x * (x <= 0.5) + (1 - x) * (x > 0.5)) * y * (1-y);
   20 :
   21 : Vh q = 1 + x * y;
   22 : Vh g = (1 + pi^2) * ue(x, y) - fe(x, y) * q(x,y);
   23 : real gamma = 1e-5;
   24 :
   25 :
   26 : func real[int] flip(real[int] uu){
   27 :     Vh u;
   28 :     for (int i = 0; i <= Ny/2; i++){
   29 :         for (int j = 0; j <= Nx; j++){
   30 :             u[][i * (Nx + 1) + j] = uu[(Ny - i) * (Nx + 1) + j];
   31 :             u[][(Ny - i) * (Nx + 1) + j] = uu[i * (Nx + 1) + j];
   32 :         }
   33 :     }
   34 :     return u[];
   35 : }
   36 :
   37 :
   38 : // State equation:
   39 : func real[int] StateProblem1(real[int] ff){
   40 :     Vh u, v, f; f[] = ff;
   41 :     Vh rsh = f * q;
   42 :
   43 :     solve SpaceTime(u, v, solver = sparsesolver) =
   44 :           int2d(Th)(dy(u) * v + dx(u) * dx(v))
   45 :         - int2d(Th)(rsh * v)
   46 :         + on(1, u = 0);
   47 :
   48 :     return u[];
   49 : }
   50 :
   51 : func real[int] StateProblem2(){
   52 :     Vh u, v;
   53 :
   54 :     solve SpaceTime(u, v, solver = sparsesolver) =
   55 :           int2d(Th)(dy(u)  * v + dx(u)  * dx(v))
   56 :         + int2d(Th)(dy(u0) * v + dx(u0) * dx(v))
   57 :         - int1d(Th, 2, 4) (uN * v)
   58 :         - int2d(Th)(g * v)
   59 :         + on(1, u = 0);
   60 :
   61 :     u = u + u0;
   62 :     return u[];
   63 : }
   64 :
   65 :
   66 :
   67 :
   68 : // Adjoint equation
   69 : func real[int] AdjointProblem(real[int] uu){
   70 :     Vh p, v, u; u[] = uu;
   71 :     Vh temp = u - ue;
   72 :     Vh pN; pN[] =  flip(temp[]);
   73 :
   74 :     solve SpaceTime(p, v, solver = sparsesolver) =
   75 :           int2d(Th)(dy(p) * v + dx(p) * dx(v))
   76 :         - int2d(Th)(pN * v)
   77 :         + on(1, p = 0);
   78 :
   79 :     return flip(p[]);
   80 : }
   81 :
   82 :
   83 : Vh uh, fh = 0;
   84 : Vh ph;
   85 : Vh rh, rh0, rhold;
   86 : Vh dh;
   87 : //******************************
   88 : // CG method
   89 :
   90 :
   91 : uh[] = StateProblem2();
   92 :
   93 : for (int iter = 0; iter < 100; iter++){
   94 :
   95 :
   96 :     ph[] = AdjointProblem(uh[]);
   97 :
   98 :     //plot(fh, fe, wait = 1, dim=3d);
   99 :     //cout << "Min and Max: =======>>>>>>> "<<fh[].min<<" +++ " << fh[].max << endl;
  100 :
  101 :     rhold = rh;
  102 :     rh = -(ph * q + gamma * fh); //-Gradient J(f)
  103 :     if (iter == 0){
  104 :         rh0 = rh;
  105 :     }
  106 :
  107 :     //cout << iter << " GradJ: " << int2d(Th)(rh * rh) << endl;
  108 :     cout << iter << " J: " << 0.5 * int2d(Th)((uh - ue)^2) + 0.5 * gamma * int2d(Th)(fh^2) << endl;
  109 :
  110 :     if ( int2d(Th)((uh-ue)^2) < 5e-5){
  111 :         cout << "I love you" << endl;
  112 :         break;
  113 :     }
  114 :
  115 :     if (iter > 0){
  116 :         real beta = int2d(Th)(rh * rh) / int2d(Th)(rhold * rhold);
  117 :         dh = rh + beta * dh;
  118 :         cout << "beta: "  << beta << endl;
  119 :         if(beta>1){
  120 :             cout << "I love you" << endl;
  121 :             //break;
  122 :         }
  123 :     }else{
  124 :         dh = rh;
  125 :     }
  126 :
  127 :     Vh udh; udh[] = StateProblem1(dh[]);
  128 :     real alpha = int2d(Th)(dh * rh) / (int2d(Th)(udh * udh) + gamma * int2d(Th)(dh * dh));
  129 :     cout << "alpha: " << alpha << endl;
  130 :     fh = fh + alpha * dh;
  131 :     uh = uh + alpha * udh;
  132 : }
  133 :
  134 : //
  135 : //******************************
  136 :
  137 :
  138 :
  139 :
  140 : Vh uh1; uh1[] = StateProblem1(fe[])+StateProblem2();
  141 : Vh uh2; uh2[] = StateProblem1(fh[])+StateProblem2();
  142 :
  143 : plot(uh1, wait = 1, dim=3d);
  144 : plot(uh2, wait = 1, dim=3d);
  145 : plot(uh1, uh2, wait = 1, dim=3d);
  146 :
  147 : Vh delta = fe - fh;
  148 : cout  << "i: " << delta[].min <<", " << delta[].max << endl;
  149 :
  150 :
  151 : plot(fe, wait = 1, dim=3d);
  152 : plot(fh, wait = 1, dim=3d);
  153 : plot(fh, fe, wait = 1, dim=3d);
  154 : cout << "Error: " << sqrt(int2d(Th)((fe - fh)^2)) << endl;
  155 :  sizestack + 1024 =10096  ( 9072 )
 
  -- Square mesh : nb vertices  =10201 ,  nb triangles = 20000 ,  nb boundary edges 400
  -- Solve :
          min -0.511104  max 1.20907
  -- Solve :
          min -0.244195  max 2.58384e-035
0 J: 0.045933
  -- Solve :
          min -1.24707e-035  max 0.257752
alpha: 1.83413
  -- Solve :
          min -0.0106082  max 0.0167402
1 J: 0.000865454
beta: 0.00216936
  -- Solve :
          min -0.00409857  max 0.00399802
alpha: 14.6004
  -- Solve :
          min -0.00219174  max 0.00282088
2 J: 8.8663e-005
beta: 0.0263964
  -- Solve :
          min -0.00070295  max 0.000369634
alpha: 39.7044
  -- Solve :
          min -0.00341711  max 5.30049e-037
3 J: 3.27176e-005
beta: 2.42475
I love you
  -- Solve :
          min -0.000337162  max 0.00321618
alpha: 2.13725
  -- Solve :
          min -0.000618209  max 0.00123184
4 J: 2.54499e-005
I love you
  -- Solve :
          min -0.511104  max 1.20907
  -- Solve :
          min -1.01365e-036  max 0.509532
  -- Solve :
          min -0.511104  max 1.20907
  -- Solve :
          min -5.98625e-036  max 0.507357
i: -0.657298, 0.302943
Error: 0.200914
times: compile 0.362s, execution 15.377s,  mpirank:0
 ######## We forget of deleting   476 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3642,  size :418456 mpirank: 0
Ok: Normal End
 try getConsole D:\Study\HUST\FEM\heatsource\FreeFem++\HeatSource1D_S1.edp
